// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using GestionDocs.Data.Abstraction.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

#nullable disable

namespace GestionDocs.Data
{
    public partial class SampleworkflowengineContext : DbContext
    {
        public SampleworkflowengineContext()
        {
        }

        public SampleworkflowengineContext(DbContextOptions<SampleworkflowengineContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Document> Documents { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<EmployeeRole> EmployeeRoles { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<StructDivision> StructDivisions { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);
            //modelBuilder.Entity<Document>(entity =>
            //{
            //    entity.ToTable("Document");

            //    entity.Property(e => e.Id).ValueGeneratedNever();

            //    entity.Property(e => e.Name)
            //        .IsRequired()
            //        .HasMaxLength(256);

            //    entity.Property(e => e.Number).ValueGeneratedOnAdd();

            //    entity.Property(e => e.State)
            //        .IsRequired()
            //        .HasMaxLength(1024)
            //        .HasDefaultValueSql("('VacationRequestCreated')");

            //    entity.Property(e => e.StateName).HasMaxLength(1024);

            //    entity.Property(e => e.Sum)
            //        .HasColumnType("money")
            //        .HasAnnotation("Relational:ColumnType", "money");

            //    entity.HasOne(d => d.Author)
            //        .WithMany(p => p.DocumentAuthors)
            //        .HasForeignKey(x => x.AuthorId)
            //        .HasConstraintName("FK_Document_Employee1");

            //    entity.HasOne(d => d.Manager)
            //        .WithMany(p => p.DocumentManagers)
            //        .HasForeignKey(x => x.ManagerId)
            //        .HasConstraintName("FK_Document_Employee");
            //});

            //modelBuilder.Entity<Employee>(entity =>
            //{
            //    entity.ToTable("Employee");

            //    entity.Property(e => e.Id).ValueGeneratedNever();

            //    entity.Property(e => e.Name)
            //        .IsRequired()
            //        .HasMaxLength(256);

            //    entity.HasOne(d => d.StructDivision)
            //        .WithMany(p => p.Employees)
            //        .HasForeignKey(x => x.StructDivisionId)
            //        .OnDelete(DeleteBehavior.ClientSetNull)
            //        .HasConstraintName("FK_Employee_StructDivision");
            //});

            //modelBuilder.Entity<EmployeeRole>(entity =>
            //{
            //    entity.HasKey(x => new { x.EmployeeId, x.RoleId })
            //        .HasName("PK_EmployeeRoles");

            //    entity.ToTable("EmployeeRole");

            //    entity.HasOne(d => d.Employee)
            //        .WithMany(p => p.EmployeeRoles)
            //        .HasForeignKey(x => x.EmployeeId)
            //        .HasConstraintName("FK_EmployeeRole_Employee");

            //    entity.HasOne(d => d.Role)
            //        .WithMany(p => p.EmployeeRoles)
            //        .HasForeignKey(x => x.RoleId)
            //        .HasConstraintName("FK_EmployeeRole_Roles");
            //});

            //modelBuilder.Entity<Role>(entity =>
            //{
            //    entity.Property(e => e.Id).ValueGeneratedNever();

            //    entity.Property(e => e.Name)
            //        .IsRequired()
            //        .HasMaxLength(256);
            //});

            //modelBuilder.Entity<StructDivision>(entity =>
            //{
            //    entity.ToTable("StructDivision");

            //    entity.Property(e => e.Id).ValueGeneratedNever();

            //    entity.Property(e => e.Name)
            //        .IsRequired()
            //        .HasMaxLength(256);

            //    entity.HasOne(d => d.Parent)
            //        .WithMany(p => p.InverseParent)
            //        .HasForeignKey(x => x.ParentId)
            //        .HasConstraintName("FK_StructDivision_StructDivision");
            //});

           // OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}